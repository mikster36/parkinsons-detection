# -*- coding: utf-8 -*-
"""TrailMaking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cKJ5NtE7nbu9T87Ee_SJX5B_xzG_7tUL

**Imports**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import tensorflow as tf
from sklearn import neighbors, svm
from sklearn.preprocessing import StandardScaler
import seaborn as sns
from matplotlib.ticker import PercentFormatter

"""**Data Preprocessing**"""

participant_status = "https://gist.githubusercontent.com/mikster36/bf6b3265b74f67b219f1aeccc5da683b/raw/2e6dbd8072330b92ba0d04ff74b238434ec732ad/Participant_Status.csv"
trail_data = "https://gist.githubusercontent.com/mikster36/0aaa29d613fdc34d35f93aa8b8a56316/raw/7885d3eaec78f394637193c4011722627884ba8d/Trail_Making_A_and_B.csv"
ps_df = pd.read_csv(participant_status)
trail_df = pd.read_csv(trail_data)
trail_df = trail_df[["PATNO","TMTACMPL", "TMTACORR", "TMTASEC", "TMTBCORR", "TMTBCMPL", "TMTBSEC"]]
trail_df["TMTACORR"] = trail_df["TMTACORR"].fillna(25)
trail_df["TMTBCORR"] = trail_df["TMTBCORR"].fillna(25)
ps_df = ps_df[["PATNO", "COHORT"]]
trail_df.dropna(inplace=True)

merged_df = pd.merge(trail_df, ps_df, on='PATNO')
merged_df = merged_df[merged_df["COHORT"] <= 2]
data = merged_df[["TMTASEC", "TMTBSEC"]]
labels = merged_df[["COHORT"]]
labels -= 1

"""**Data Visualization**"""

len(data)

len(labels)

data.head()

labels.head()

data.isna().sum().sum()

labels.isna().sum().sum()

labels["COHORT"] == 1

plt.hist(data[labels["COHORT"] == 0]["TMTASEC"], alpha = 0.5, bins=20, label="Diagnosed")
plt.hist(data[labels["COHORT"] == 1]["TMTASEC"], alpha = 0.75, bins=20, label="Control")
plt.legend()
plt.xlabel("Completion Time (Seconds)")
plt.ylabel("Number of Subjects")
plt.show()

"""**Training Model**"""

scaler = StandardScaler() #Standardizing data (mean = 0, SD = 1)
scaler.fit(data)
data = scaler.transform(data)

labels = labels.to_numpy().flatten()
labels.shape

train_X, test_X, train_Y, test_Y = train_test_split(data, labels, random_state=2, test_size=0.2)

model = svm.SVC(gamma=.01)

model.fit(train_X, train_Y)

X_test_prediction = model.predict(test_X)
test_data_accuracy = accuracy_score(test_Y, X_test_prediction)
print('Accuracy score of test data: ', test_data_accuracy)



model2 = neighbors.KNeighborsClassifier(n_neighbors=10, weights="uniform")

model2.fit(train_X, train_Y)

X_test_prediction = model2.predict(test_X)
test_data_accuracy = accuracy_score(test_Y, X_test_prediction)
print('Accuracy score of test data: ', test_data_accuracy)