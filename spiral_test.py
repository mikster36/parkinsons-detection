# -*- coding: utf-8 -*-
"""sst_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18LOjUUEq90Zt6rWTrWSdy2JobeLizhGg

## Imports
"""

# imports
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as tf

"""## Data Preparation

Handwriting database consists of 62* PWP (People with Parkinson) and 15 healthy
individuals. Three types of recordings (Static Spiral Test, Dynamic Spiral Test and Stability Test) are taken.
<br><br>
Dataset is delimited as CSV values as follows;
<br>
X ; Y; Z; Pressure; GripAngle; Timestamp; TestID

----------------
Test ID: <br>
0: Static Spiral Test ( Draw on the given spiral pattern) <br>
1: Dynamic Spiral Test ( Spiral pattern will blink in a certain time, so subjects need to continue on their draw) <br>
2: Circular Motion Test (Subjects draw circles around the red point)
<br>
*Only 61 were used as one file was buggy
"""

from google.colab import drive
drive.mount('/content/drive')
directory = "/content/drive/MyDrive/PARKINSON_HW/hw_dataset/"

cols = ('x', 'y', 'z', 'Pressure', 'GripAngle', 'Timestamp', 'TestID')

def to_df(path: str):                                                           # converts .txt to DataFrame objects
  df = pd.read_csv(directory + path, sep=";", names=cols)
  df = df[df.TestID == 0]                                                       # only focusing on static spiral test (SST)
  df = df.drop(['z', 'Pressure', 'GripAngle', 'Timestamp', 'TestID'],           # info only collectable using drawing tablet, unable to attain this data via web app
                  axis=1)
  return df

def to_img(df):
  x_max = 800
  y_max = 450
  img = np.full((y_max, x_max, 3), [255, 255, 255])
  for i in range(df.x.size):
    x = df.x[i]
    y = y_max - df.y[i]
    img[y][x] = [0, 0, 0]
  return img

def to_tf(img):
  t = tf.constant(img, dtype=tf.float32)
  t /= 255.0
  return t

imgs = list()
labels = list()
for dir in os.listdir(directory):
  if os.path.isdir(directory + dir):
    for file in os.listdir(directory + dir):
      f = os.path.join(dir, file)
      img = to_tf(to_img(to_df(f)))
      if "control" in f:
        imgs.append(img)
        labels.append(0)                                                        # assign 0 for healthy label
      else:
        imgs.append(img)
        labels.append(1)                                                        # assign 1 for Parkinson's label

imgs = np.array([np.array(val) for val in imgs])
labels = np.asarray(labels)

"""##Building the Model"""

train_imgs, test_imgs, train_labels, test_labels = train_test_split(imgs,
                                                                    labels,
                                                                    test_size=0.2,
                                                                    random_state=2)

model = tf.keras.models.Sequential([tf.keras.layers.Rescaling(scale=1, input_shape=(450, 800, 3)),
                                    tf.keras.layers.Conv2D(16, 3, padding='same', activation='relu'),
                                    tf.keras.layers.MaxPooling2D(),
                                    tf.keras.layers.Conv2D(32, 3, padding='same', activation='relu'),
                                    tf.keras.layers.MaxPooling2D(),
                                    tf.keras.layers.Conv2D(64, 3, padding='same', activation='relu'),
                                    tf.keras.layers.MaxPooling2D(),
                                    tf.keras.layers.Conv2D(128, 3, padding='same', activation='relu'),
                                    tf.keras.layers.MaxPooling2D(),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dense(1024, activation='relu'),
                                    tf.keras.layers.Dense(512, activation='relu'),
                                    tf.keras.layers.Dense(64, activation='relu'),
                                    tf.keras.layers.Dense(2, activation='softmax')])

model.compile(optimizer = tf.keras.optimizers.Adam(),
              loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

#look at the shape of a cross entropy loss function.

history = model.fit(train_imgs, train_labels, epochs=15)

"""##Testing the Model"""

accuracy = model.evaluate(test_imgs, test_labels)
print(f"Accuracy of test data is {accuracy[1]}")

classifications = model.predict(test_imgs)
for i in range(16):
  plt.imshow(test_imgs[i])
  plt.show()
  if test_labels[i] == 1:
    print("Has Parkinsons")
  else:
    print("Is healthy")
  print("{:.2f}".format(classifications[i][1]), "chance they have PD")
  print("{:.2f}".format(classifications[i][0]), "chance they are healthy")

"""## References

1.Isenkul, M.E.; Sakar, B.E.; Kursun, O. . 'Improved spiral test using digitized graphics tablet for monitoring Parkinson's disease.' The 2nd International Conference on e-Health and Telemedicine (ICEHTM-2014), pp. 171-175, 2014.
<br>
2.Erdogdu Sakar, B., Isenkul, M., Sakar, C.O., Sertbas, A., Gurgen, F., Delil, S., Apaydin, H., Kursun, O., 'Collection and Analysis of a Parkinson Speech Dataset with Multiple Types of Sound Recordings', IEEE Journal of Biomedical and Health Informatics, vol. 17(4), pp. 828-834, 2013.
"""